// Code generated by protoc-gen-go.
// source: user.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	Id          int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Username    string                     `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password    string                     `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	DisplayName string                     `protobuf:"bytes,4,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Phone       string                     `protobuf:"bytes,5,opt,name=phone" json:"phone,omitempty"`
	UserType    string                     `protobuf:"bytes,6,opt,name=user_type,json=userType" json:"user_type,omitempty"`
	Token       string                     `protobuf:"bytes,7,opt,name=token" json:"token,omitempty"`
	CreateTime  *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime  *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *User) GetCreateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *User) GetUpdateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

type Users struct {
	Items []*User `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Users) Reset()                    { *m = Users{} }
func (m *Users) String() string            { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()               {}
func (*Users) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *Users) GetItems() []*User {
	if m != nil {
		return m.Items
	}
	return nil
}

type UserCredentials struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *UserCredentials) Reset()                    { *m = UserCredentials{} }
func (m *UserCredentials) String() string            { return proto.CompactTextString(m) }
func (*UserCredentials) ProtoMessage()               {}
func (*UserCredentials) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

type UserUpdatePassword struct {
	Username    string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=new_password,json=newPassword" json:"new_password,omitempty"`
}

func (m *UserUpdatePassword) Reset()                    { *m = UserUpdatePassword{} }
func (m *UserUpdatePassword) String() string            { return proto.CompactTextString(m) }
func (*UserUpdatePassword) ProtoMessage()               {}
func (*UserUpdatePassword) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

type UserPageRequest struct {
	User        *User        `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	PageRequest *PageRequest `protobuf:"bytes,2,opt,name=page_request,json=pageRequest" json:"page_request,omitempty"`
}

func (m *UserPageRequest) Reset()                    { *m = UserPageRequest{} }
func (m *UserPageRequest) String() string            { return proto.CompactTextString(m) }
func (*UserPageRequest) ProtoMessage()               {}
func (*UserPageRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *UserPageRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserPageRequest) GetPageRequest() *PageRequest {
	if m != nil {
		return m.PageRequest
	}
	return nil
}

type UserPageResponse struct {
	Page  int32   `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Size  int32   `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Count int32   `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Items []*User `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

func (m *UserPageResponse) Reset()                    { *m = UserPageResponse{} }
func (m *UserPageResponse) String() string            { return proto.CompactTextString(m) }
func (*UserPageResponse) ProtoMessage()               {}
func (*UserPageResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *UserPageResponse) GetItems() []*User {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "protobuf.User")
	proto.RegisterType((*Users)(nil), "protobuf.Users")
	proto.RegisterType((*UserCredentials)(nil), "protobuf.UserCredentials")
	proto.RegisterType((*UserUpdatePassword)(nil), "protobuf.UserUpdatePassword")
	proto.RegisterType((*UserPageRequest)(nil), "protobuf.UserPageRequest")
	proto.RegisterType((*UserPageResponse)(nil), "protobuf.UserPageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for UserService service

type UserServiceClient interface {
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	SignIn(ctx context.Context, in *UserCredentials, opts ...grpc.CallOption) (*User, error)
	Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Count(ctx context.Context, in *User, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error)
	ListAll(ctx context.Context, in *UserPageRequest, opts ...grpc.CallOption) (*Users, error)
	List(ctx context.Context, in *UserPageRequest, opts ...grpc.CallOption) (*UserPageResponse, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Delete(ctx context.Context, in *User, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/protobuf.UserService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignIn(ctx context.Context, in *UserCredentials, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/protobuf.UserService/SignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/protobuf.UserService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Count(ctx context.Context, in *User, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error) {
	out := new(google_protobuf1.Int32Value)
	err := grpc.Invoke(ctx, "/protobuf.UserService/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListAll(ctx context.Context, in *UserPageRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := grpc.Invoke(ctx, "/protobuf.UserService/ListAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) List(ctx context.Context, in *UserPageRequest, opts ...grpc.CallOption) (*UserPageResponse, error) {
	out := new(UserPageResponse)
	err := grpc.Invoke(ctx, "/protobuf.UserService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/protobuf.UserService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Delete(ctx context.Context, in *User, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/protobuf.UserService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	Create(context.Context, *User) (*User, error)
	SignIn(context.Context, *UserCredentials) (*User, error)
	Get(context.Context, *User) (*User, error)
	Count(context.Context, *User) (*google_protobuf1.Int32Value, error)
	ListAll(context.Context, *UserPageRequest) (*Users, error)
	List(context.Context, *UserPageRequest) (*UserPageResponse, error)
	Update(context.Context, *User) (*User, error)
	Delete(context.Context, *User) (*google_protobuf2.Empty, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignIn(ctx, req.(*UserCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Get(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Count(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListAll(ctx, req.(*UserPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).List(ctx, req.(*UserPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Delete(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _UserService_SignIn_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserService_Get_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _UserService_Count_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _UserService_ListAll_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor6 = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0x55, 0x7e, 0x9c, 0x36, 0xe3, 0xaa, 0xfd, 0xb4, 0xfa, 0x40, 0xc6, 0xbd, 0x01, 0x0b, 0xa4,
	0xde, 0xe0, 0x40, 0x02, 0x12, 0xa8, 0xe2, 0x82, 0x16, 0x84, 0x2a, 0x21, 0x54, 0xb9, 0x2d, 0xb7,
	0x91, 0x9b, 0x4c, 0x9d, 0x05, 0x7b, 0x77, 0xf1, 0xae, 0x5b, 0x95, 0x57, 0xe1, 0x35, 0x78, 0x40,
	0xf6, 0x27, 0xae, 0x9b, 0xa4, 0x4a, 0x6e, 0x92, 0x39, 0x73, 0xe6, 0xcc, 0xee, 0x9c, 0x1d, 0x19,
	0xa0, 0x92, 0x58, 0xc6, 0xa2, 0xe4, 0x8a, 0x93, 0x6d, 0xfb, 0x77, 0x59, 0x5d, 0x85, 0xa3, 0x8c,
	0xaa, 0x59, 0x75, 0x19, 0x4f, 0x78, 0x31, 0xc8, 0x78, 0x9e, 0xb2, 0x6c, 0x50, 0x73, 0x03, 0xa1,
	0x6e, 0x05, 0xca, 0x01, 0x16, 0x3a, 0x70, 0xbf, 0x4e, 0x1e, 0x1e, 0x6e, 0x16, 0x29, 0x5a, 0xa0,
	0x54, 0x69, 0x21, 0x9a, 0x68, 0x2e, 0x7e, 0xbf, 0x59, 0x7c, 0x53, 0xa6, 0x42, 0x60, 0xd9, 0x04,
	0x73, 0xe9, 0x8e, 0xd6, 0x14, 0x9c, 0x39, 0x14, 0xfd, 0x6d, 0x43, 0xf7, 0x42, 0xcf, 0x44, 0x76,
	0xa1, 0x4d, 0xa7, 0x41, 0xeb, 0x69, 0xeb, 0xc0, 0x4b, 0x74, 0x44, 0x42, 0xd8, 0x36, 0xb3, 0xb2,
	0xb4, 0xc0, 0xa0, 0xad, 0xb3, 0xfd, 0xe4, 0x0e, 0x1b, 0x4e, 0xa4, 0x52, 0xde, 0xf0, 0x72, 0x1a,
	0x74, 0x1c, 0x57, 0x63, 0xf2, 0x0c, 0x76, 0xa6, 0x54, 0x8a, 0x3c, 0xbd, 0x1d, 0x5b, 0x6d, 0xd7,
	0xf2, 0xfe, 0x3c, 0xf7, 0xcd, 0xc8, 0xff, 0x07, 0x4f, 0xcc, 0x38, 0xc3, 0xc0, 0xb3, 0x9c, 0x03,
	0x64, 0x1f, 0xfa, 0xe6, 0x80, 0xb1, 0xb9, 0x7d, 0xd0, 0x6b, 0x4e, 0x3c, 0xd7, 0xd8, 0x48, 0x14,
	0xff, 0x89, 0x2c, 0xd8, 0x72, 0x12, 0x0b, 0xc8, 0x21, 0xf8, 0x93, 0x12, 0x53, 0x85, 0x63, 0xe3,
	0x4f, 0xb0, 0xad, 0x39, 0x7f, 0x18, 0xc6, 0x19, 0xe7, 0x59, 0x8e, 0x71, 0x6d, 0x48, 0x7c, 0x5e,
	0x9b, 0x97, 0x80, 0x2b, 0x37, 0x09, 0x23, 0xae, 0xc4, 0xf4, 0x4e, 0xdc, 0xdf, 0x2c, 0x76, 0xe5,
	0x26, 0x11, 0xbd, 0x04, 0xcf, 0xb8, 0x26, 0xc9, 0x73, 0xf0, 0xa8, 0xc2, 0x42, 0x6a, 0xe7, 0x3a,
	0x5a, 0xbf, 0xdb, 0x08, 0x0d, 0x9f, 0x38, 0x32, 0x3a, 0x81, 0x3d, 0x03, 0x8f, 0x4b, 0x9c, 0x22,
	0x53, 0x34, 0xcd, 0xe5, 0x82, 0xbf, 0xad, 0x35, 0xfe, 0xb6, 0x17, 0xfd, 0x8d, 0xce, 0x80, 0x98,
	0x56, 0x17, 0xf6, 0x2e, 0xa7, 0xb5, 0xeb, 0xeb, 0xba, 0xe9, 0x17, 0x61, 0x78, 0x33, 0x5e, 0xea,
	0xe8, 0xeb, 0x5c, 0x2d, 0x8f, 0xb8, 0xbb, 0xdf, 0x69, 0x9a, 0x61, 0x82, 0xbf, 0x2a, 0x3d, 0x30,
	0x89, 0xa0, 0x6b, 0x3a, 0xd8, 0x6e, 0xab, 0x73, 0x59, 0x8e, 0xbc, 0x83, 0x1d, 0xa1, 0x25, 0xe3,
	0xd2, 0x69, 0x6c, 0x67, 0x7f, 0xf8, 0xa8, 0xa9, 0xbd, 0xd7, 0x30, 0xf1, 0x45, 0x03, 0xa2, 0x6b,
	0xf8, 0xaf, 0x39, 0x50, 0x0a, 0xce, 0x24, 0x12, 0x02, 0x5d, 0x53, 0x32, 0xdf, 0x41, 0x1b, 0x9b,
	0x9c, 0xa4, 0xbf, 0xdd, 0x06, 0xea, 0x9c, 0x89, 0xcd, 0x2e, 0x4c, 0x78, 0xc5, 0x94, 0x5d, 0x3d,
	0x2f, 0x71, 0xa0, 0x79, 0x88, 0xee, 0x9a, 0x87, 0x18, 0xfe, 0xe9, 0x80, 0x6f, 0xf0, 0x19, 0x96,
	0xd7, 0x74, 0x82, 0xe4, 0x00, 0x7a, 0xc7, 0x76, 0x25, 0xc8, 0x92, 0x20, 0x5c, 0xc2, 0x64, 0x04,
	0xbd, 0x33, 0x9a, 0xb1, 0x13, 0x46, 0x9e, 0x2c, 0x32, 0xf7, 0x1e, 0x75, 0x45, 0xf4, 0x02, 0x3a,
	0x5f, 0x50, 0x6d, 0xec, 0xfd, 0x06, 0xbc, 0x63, 0x3b, 0xc4, 0x72, 0xe1, 0xfe, 0xca, 0x3a, 0x9e,
	0x30, 0x35, 0x1a, 0x7e, 0x4f, 0xf3, 0x0a, 0xc9, 0x5b, 0xd8, 0xfa, 0x4a, 0xa5, 0xfa, 0x98, 0xe7,
	0xcb, 0x57, 0xba, 0x67, 0x7b, 0xb8, 0xb7, 0x48, 0x49, 0xf2, 0x01, 0xba, 0x46, 0xb6, 0x4e, 0x13,
	0x3e, 0x44, 0xcd, 0x5f, 0x49, 0x3b, 0xe6, 0x76, 0x6f, 0xe3, 0x54, 0xaf, 0xa0, 0xf7, 0x09, 0x73,
	0x7c, 0xa0, 0xf2, 0xf1, 0xca, 0x58, 0x9f, 0xcd, 0x87, 0xf1, 0xe8, 0x35, 0x44, 0xfa, 0xe3, 0x14,
	0xff, 0xa0, 0x72, 0x56, 0x5d, 0xa5, 0x2c, 0x9e, 0x21, 0x55, 0x55, 0x3c, 0xc9, 0xa9, 0xf6, 0xf7,
	0xae, 0xf6, 0xa8, 0x6f, 0xef, 0x64, 0xd0, 0x69, 0xeb, 0xb2, 0x67, 0xd3, 0xa3, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x87, 0xd7, 0x77, 0x6c, 0x99, 0x05, 0x00, 0x00,
}
