// Code generated by protoc-gen-go.
// source: project.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Project struct {
	Id         int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	GroupName  string                     `protobuf:"bytes,2,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	Name       string                     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Git        string                     `protobuf:"bytes,4,opt,name=git" json:"git,omitempty"`
	CreateTime *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Project) GetCreateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Project) GetUpdateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

type Projects struct {
	Items []*Project `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Projects) Reset()                    { *m = Projects{} }
func (m *Projects) String() string            { return proto.CompactTextString(m) }
func (*Projects) ProtoMessage()               {}
func (*Projects) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Projects) GetItems() []*Project {
	if m != nil {
		return m.Items
	}
	return nil
}

type ProjectPageRequest struct {
	Project     *Project     `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	PageRequest *PageRequest `protobuf:"bytes,2,opt,name=page_request,json=pageRequest" json:"page_request,omitempty"`
}

func (m *ProjectPageRequest) Reset()                    { *m = ProjectPageRequest{} }
func (m *ProjectPageRequest) String() string            { return proto.CompactTextString(m) }
func (*ProjectPageRequest) ProtoMessage()               {}
func (*ProjectPageRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ProjectPageRequest) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *ProjectPageRequest) GetPageRequest() *PageRequest {
	if m != nil {
		return m.PageRequest
	}
	return nil
}

type ProjectPageResponse struct {
	Page  int32      `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Size  int32      `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Count int32      `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Items []*Project `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

func (m *ProjectPageResponse) Reset()                    { *m = ProjectPageResponse{} }
func (m *ProjectPageResponse) String() string            { return proto.CompactTextString(m) }
func (*ProjectPageResponse) ProtoMessage()               {}
func (*ProjectPageResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *ProjectPageResponse) GetItems() []*Project {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Project)(nil), "protobuf.Project")
	proto.RegisterType((*Projects)(nil), "protobuf.Projects")
	proto.RegisterType((*ProjectPageRequest)(nil), "protobuf.ProjectPageRequest")
	proto.RegisterType((*ProjectPageResponse)(nil), "protobuf.ProjectPageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for ProjectService service

type ProjectServiceClient interface {
	Create(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	Get(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	Count(ctx context.Context, in *Project, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error)
	ListAll(ctx context.Context, in *ProjectPageRequest, opts ...grpc.CallOption) (*Projects, error)
	List(ctx context.Context, in *ProjectPageRequest, opts ...grpc.CallOption) (*ProjectPageResponse, error)
	Update(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	Delete(ctx context.Context, in *Project, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error)
}

type projectServiceClient struct {
	cc *grpc.ClientConn
}

func NewProjectServiceClient(cc *grpc.ClientConn) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) Create(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := grpc.Invoke(ctx, "/protobuf.ProjectService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Get(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := grpc.Invoke(ctx, "/protobuf.ProjectService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Count(ctx context.Context, in *Project, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error) {
	out := new(google_protobuf1.Int32Value)
	err := grpc.Invoke(ctx, "/protobuf.ProjectService/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListAll(ctx context.Context, in *ProjectPageRequest, opts ...grpc.CallOption) (*Projects, error) {
	out := new(Projects)
	err := grpc.Invoke(ctx, "/protobuf.ProjectService/ListAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) List(ctx context.Context, in *ProjectPageRequest, opts ...grpc.CallOption) (*ProjectPageResponse, error) {
	out := new(ProjectPageResponse)
	err := grpc.Invoke(ctx, "/protobuf.ProjectService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Update(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := grpc.Invoke(ctx, "/protobuf.ProjectService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Delete(ctx context.Context, in *Project, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error) {
	out := new(google_protobuf1.Int32Value)
	err := grpc.Invoke(ctx, "/protobuf.ProjectService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProjectService service

type ProjectServiceServer interface {
	Create(context.Context, *Project) (*Project, error)
	Get(context.Context, *Project) (*Project, error)
	Count(context.Context, *Project) (*google_protobuf1.Int32Value, error)
	ListAll(context.Context, *ProjectPageRequest) (*Projects, error)
	List(context.Context, *ProjectPageRequest) (*ProjectPageResponse, error)
	Update(context.Context, *Project) (*Project, error)
	Delete(context.Context, *Project) (*google_protobuf1.Int32Value, error)
}

func RegisterProjectServiceServer(s *grpc.Server, srv ProjectServiceServer) {
	s.RegisterService(&_ProjectService_serviceDesc, srv)
}

func _ProjectService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ProjectService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Create(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ProjectService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Get(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ProjectService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Count(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ProjectService/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListAll(ctx, req.(*ProjectPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ProjectService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).List(ctx, req.(*ProjectPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ProjectService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Update(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ProjectService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Delete(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProjectService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProjectService_Get_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _ProjectService_Count_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _ProjectService_ListAll_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ProjectService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProjectService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProjectService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor3 = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0x55, 0xea, 0x38, 0x69, 0x27, 0xa1, 0x82, 0x05, 0xa4, 0xc8, 0x50, 0x09, 0xf9, 0x05, 0x24,
	0x24, 0x47, 0x4a, 0x90, 0x28, 0xea, 0x13, 0x0d, 0x12, 0x42, 0x42, 0x28, 0x32, 0x97, 0xd7, 0xc8,
	0x71, 0xa7, 0xce, 0x56, 0xb6, 0x77, 0xf1, 0xee, 0x82, 0xb8, 0x7c, 0x05, 0x5f, 0xc7, 0xe7, 0xb0,
	0x17, 0xbb, 0x2e, 0x72, 0xda, 0xf4, 0x69, 0x67, 0xcf, 0x9c, 0x33, 0x9e, 0x33, 0xb3, 0x86, 0x3b,
	0xbc, 0x62, 0x17, 0x98, 0xca, 0x48, 0x9f, 0x92, 0x91, 0x7d, 0x7b, 0xac, 0xd5, 0x79, 0x70, 0x92,
	0x51, 0xb9, 0x51, 0xeb, 0x28, 0x65, 0xc5, 0x34, 0x63, 0x79, 0x52, 0x66, 0xd3, 0x26, 0x37, 0xe5,
	0xf2, 0x07, 0x47, 0x31, 0x95, 0xb4, 0x40, 0x21, 0x93, 0x82, 0xb7, 0x91, 0x2b, 0x13, 0xbc, 0xda,
	0x2d, 0xfe, 0x5e, 0x25, 0x9c, 0x63, 0xd5, 0x06, 0xb5, 0x74, 0xac, 0x35, 0x05, 0x2b, 0xdd, 0x2d,
	0xfc, 0xdb, 0x83, 0xe1, 0xd2, 0x75, 0x48, 0x0e, 0x61, 0x8f, 0x9e, 0x4d, 0x7a, 0x4f, 0x7a, 0xcf,
	0xfc, 0x58, 0x47, 0xe4, 0x08, 0x20, 0xab, 0x98, 0xe2, 0xab, 0x32, 0x29, 0x70, 0xb2, 0xa7, 0xf1,
	0x83, 0xf8, 0xc0, 0x22, 0x1f, 0x34, 0x40, 0x08, 0xf4, 0x6d, 0xc2, 0xb3, 0x09, 0x1b, 0x93, 0xbb,
	0xe0, 0xe9, 0xce, 0x26, 0x7d, 0x0b, 0x99, 0x90, 0x9c, 0xc0, 0x28, 0xad, 0x30, 0x91, 0xb8, 0x32,
	0x1e, 0x26, 0xbe, 0xce, 0x8c, 0x66, 0x41, 0x94, 0x31, 0x96, 0xe5, 0x18, 0x35, 0x4d, 0x47, 0x9f,
	0x1a, 0x83, 0x31, 0x38, 0xba, 0x01, 0x8c, 0x58, 0xf1, 0xb3, 0x4b, 0xf1, 0x60, 0xb7, 0xd8, 0xd1,
	0x0d, 0x10, 0xce, 0x61, 0xbf, 0x76, 0x26, 0xc8, 0x53, 0xf0, 0xa9, 0xc4, 0x42, 0x68, 0x77, 0x9e,
	0x2e, 0x71, 0xaf, 0xd5, 0xd6, 0x94, 0xd8, 0xe5, 0xc3, 0x5f, 0x40, 0x6a, 0x64, 0x99, 0x64, 0x18,
	0xe3, 0x57, 0xa5, 0x2b, 0x93, 0xe7, 0x30, 0xac, 0xd7, 0x68, 0xc7, 0xb3, 0xb5, 0x40, 0xc3, 0x20,
	0xc7, 0x30, 0xe6, 0x5a, 0xbb, 0xaa, 0x9c, 0xd8, 0x0e, 0x6e, 0x34, 0x7b, 0x78, 0x45, 0xd1, 0x56,
	0x8e, 0x47, 0xbc, 0xbd, 0x84, 0xbf, 0xe1, 0xfe, 0x7f, 0x1f, 0x17, 0x9c, 0x95, 0xc2, 0x0e, 0xda,
	0xb0, 0xea, 0xcd, 0xd8, 0xd8, 0x60, 0x82, 0xfe, 0x74, 0x5b, 0xd1, 0x98, 0x89, 0xc9, 0x03, 0xf0,
	0x53, 0xa6, 0x4a, 0x69, 0x37, 0xe2, 0xc7, 0xee, 0xd2, 0x5a, 0xef, 0xdf, 0x6c, 0x7d, 0xf6, 0xc7,
	0x83, 0xc3, 0x1a, 0xfa, 0x88, 0xd5, 0x37, 0x9a, 0x22, 0x89, 0x60, 0xb0, 0xb0, 0xdb, 0x20, 0x5d,
	0x59, 0xd0, 0x85, 0xf4, 0x9c, 0xbc, 0xb7, 0x28, 0x6f, 0x49, 0x7e, 0x09, 0xfe, 0xc2, 0x76, 0xb8,
	0x85, 0xfe, 0xa8, 0xb3, 0xe3, 0x77, 0xa5, 0x9c, 0xcf, 0xbe, 0x24, 0xb9, 0x32, 0xaf, 0x62, 0xf8,
	0x9e, 0x0a, 0xf9, 0x3a, 0xcf, 0xc9, 0xe3, 0x8e, 0xf4, 0xca, 0x70, 0x03, 0xd2, 0xc9, 0x0a, 0xb2,
	0x80, 0xbe, 0x11, 0xef, 0x50, 0x1e, 0x5d, 0x93, 0xad, 0x37, 0xa2, 0xe7, 0xf2, 0xd9, 0x3e, 0xb4,
	0x5b, 0x5a, 0x3d, 0x86, 0xc1, 0x1b, 0xcc, 0x71, 0x3b, 0xff, 0x26, 0xaf, 0xa7, 0x2f, 0x20, 0xd4,
	0xff, 0x6b, 0x74, 0x41, 0xc5, 0x46, 0x9d, 0x27, 0x65, 0xb4, 0x41, 0x2a, 0x55, 0x94, 0xe6, 0x14,
	0x4b, 0x79, 0x29, 0x38, 0x1d, 0x37, 0x4d, 0x1a, 0x60, 0xd9, 0x5b, 0x0f, 0x6c, 0x66, 0xfe, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0xaa, 0x10, 0x8a, 0xc6, 0x7d, 0x04, 0x00, 0x00,
}
