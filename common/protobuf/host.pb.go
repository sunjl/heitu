// Code generated by protoc-gen-go.
// source: host.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Host struct {
	Id         int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	GroupName  string                     `protobuf:"bytes,2,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	Name       string                     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Ip         string                     `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	Processor  string                     `protobuf:"bytes,5,opt,name=processor" json:"processor,omitempty"`
	Memory     int32                      `protobuf:"varint,6,opt,name=memory" json:"memory,omitempty"`
	Disk       int32                      `protobuf:"varint,7,opt,name=disk" json:"disk,omitempty"`
	Platform   string                     `protobuf:"bytes,8,opt,name=platform" json:"platform,omitempty"`
	CreateTime *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *Host) Reset()                    { *m = Host{} }
func (m *Host) String() string            { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()               {}
func (*Host) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Host) GetCreateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Host) GetUpdateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

type Hosts struct {
	Items []*Host `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Hosts) Reset()                    { *m = Hosts{} }
func (m *Hosts) String() string            { return proto.CompactTextString(m) }
func (*Hosts) ProtoMessage()               {}
func (*Hosts) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Hosts) GetItems() []*Host {
	if m != nil {
		return m.Items
	}
	return nil
}

type HostPageRequest struct {
	Host        *Host        `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	PageRequest *PageRequest `protobuf:"bytes,2,opt,name=page_request,json=pageRequest" json:"page_request,omitempty"`
}

func (m *HostPageRequest) Reset()                    { *m = HostPageRequest{} }
func (m *HostPageRequest) String() string            { return proto.CompactTextString(m) }
func (*HostPageRequest) ProtoMessage()               {}
func (*HostPageRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *HostPageRequest) GetHost() *Host {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *HostPageRequest) GetPageRequest() *PageRequest {
	if m != nil {
		return m.PageRequest
	}
	return nil
}

type HostPageResponse struct {
	Page  int32   `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Size  int32   `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Count int32   `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Items []*Host `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

func (m *HostPageResponse) Reset()                    { *m = HostPageResponse{} }
func (m *HostPageResponse) String() string            { return proto.CompactTextString(m) }
func (*HostPageResponse) ProtoMessage()               {}
func (*HostPageResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *HostPageResponse) GetItems() []*Host {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Host)(nil), "protobuf.Host")
	proto.RegisterType((*Hosts)(nil), "protobuf.Hosts")
	proto.RegisterType((*HostPageRequest)(nil), "protobuf.HostPageRequest")
	proto.RegisterType((*HostPageResponse)(nil), "protobuf.HostPageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for HostService service

type HostServiceClient interface {
	Greate(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	Get(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	Count(ctx context.Context, in *Host, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error)
	ListAll(ctx context.Context, in *HostPageRequest, opts ...grpc.CallOption) (*Hosts, error)
	List(ctx context.Context, in *HostPageRequest, opts ...grpc.CallOption) (*HostPageResponse, error)
	Update(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	Delete(ctx context.Context, in *Host, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error)
}

type hostServiceClient struct {
	cc *grpc.ClientConn
}

func NewHostServiceClient(cc *grpc.ClientConn) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) Greate(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/protobuf.HostService/Greate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) Get(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/protobuf.HostService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) Count(ctx context.Context, in *Host, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error) {
	out := new(google_protobuf1.Int32Value)
	err := grpc.Invoke(ctx, "/protobuf.HostService/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) ListAll(ctx context.Context, in *HostPageRequest, opts ...grpc.CallOption) (*Hosts, error) {
	out := new(Hosts)
	err := grpc.Invoke(ctx, "/protobuf.HostService/ListAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) List(ctx context.Context, in *HostPageRequest, opts ...grpc.CallOption) (*HostPageResponse, error) {
	out := new(HostPageResponse)
	err := grpc.Invoke(ctx, "/protobuf.HostService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) Update(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/protobuf.HostService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) Delete(ctx context.Context, in *Host, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error) {
	out := new(google_protobuf1.Int32Value)
	err := grpc.Invoke(ctx, "/protobuf.HostService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HostService service

type HostServiceServer interface {
	Greate(context.Context, *Host) (*Host, error)
	Get(context.Context, *Host) (*Host, error)
	Count(context.Context, *Host) (*google_protobuf1.Int32Value, error)
	ListAll(context.Context, *HostPageRequest) (*Hosts, error)
	List(context.Context, *HostPageRequest) (*HostPageResponse, error)
	Update(context.Context, *Host) (*Host, error)
	Delete(context.Context, *Host) (*google_protobuf1.Int32Value, error)
}

func RegisterHostServiceServer(s *grpc.Server, srv HostServiceServer) {
	s.RegisterService(&_HostService_serviceDesc, srv)
}

func _HostService_Greate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Greate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.HostService/Greate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Greate(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.HostService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Get(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.HostService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Count(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.HostService/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).ListAll(ctx, req.(*HostPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.HostService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).List(ctx, req.(*HostPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.HostService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Update(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.HostService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Delete(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greate",
			Handler:    _HostService_Greate_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HostService_Get_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _HostService_Count_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _HostService_ListAll_Handler,
		},
		{
			MethodName: "List",
			Handler:    _HostService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _HostService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HostService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor2 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0x5d, 0x6f, 0xd3, 0x40,
	0x10, 0x54, 0x13, 0x3b, 0x4d, 0xd6, 0x55, 0x8b, 0x4e, 0x80, 0x8c, 0x01, 0x09, 0x59, 0x20, 0xf5,
	0x05, 0x47, 0xa4, 0x54, 0x02, 0x55, 0x3c, 0x50, 0x90, 0x0a, 0x12, 0x42, 0x95, 0xf9, 0x78, 0x8d,
	0x1c, 0x67, 0xe3, 0x1c, 0xd8, 0xbe, 0xc3, 0x77, 0x2e, 0x2a, 0xff, 0x8c, 0xdf, 0xc4, 0x9f, 0xe0,
	0x6e, 0x9d, 0xc4, 0x6d, 0x5a, 0x25, 0x4f, 0xd9, 0x99, 0xd9, 0xd9, 0xbb, 0x9b, 0x75, 0x00, 0xe6,
	0x42, 0xe9, 0x48, 0x56, 0x42, 0x0b, 0xd6, 0xa7, 0x9f, 0x49, 0x3d, 0x0b, 0x4e, 0x32, 0xae, 0xe7,
	0xf5, 0x24, 0x4a, 0x45, 0x31, 0xcc, 0x44, 0x9e, 0x94, 0xd9, 0x70, 0xa9, 0x0d, 0xa5, 0xbe, 0x94,
	0xa8, 0x86, 0x9a, 0x17, 0xa8, 0x74, 0x52, 0xc8, 0xb6, 0x6a, 0xc6, 0x04, 0xaf, 0xb7, 0x9b, 0x7f,
	0x57, 0x89, 0x94, 0x58, 0xb5, 0xc5, 0xc2, 0xba, 0x67, 0x3c, 0x85, 0x28, 0x1b, 0x14, 0xfe, 0xed,
	0x80, 0xf3, 0xc1, 0x5c, 0x8f, 0xed, 0x43, 0x87, 0x4f, 0xfd, 0x9d, 0x27, 0x3b, 0x87, 0x6e, 0x6c,
	0x2a, 0xf6, 0x18, 0x20, 0xab, 0x44, 0x2d, 0xc7, 0x65, 0x52, 0xa0, 0xdf, 0x31, 0xfc, 0x20, 0x1e,
	0x10, 0xf3, 0xd9, 0x10, 0x8c, 0x81, 0x43, 0x42, 0x97, 0x04, 0xaa, 0x69, 0x84, 0xf4, 0x1d, 0x62,
	0x4c, 0xc5, 0x1e, 0xc1, 0xc0, 0x1c, 0x92, 0xa2, 0x52, 0xa2, 0xf2, 0xdd, 0x66, 0xc2, 0x8a, 0x60,
	0xf7, 0xa1, 0x57, 0x60, 0x21, 0xaa, 0x4b, 0xbf, 0x47, 0x87, 0x2e, 0x90, 0x9d, 0x3c, 0xe5, 0xea,
	0xa7, 0xbf, 0x4b, 0x2c, 0xd5, 0x2c, 0x80, 0xbe, 0xcc, 0x13, 0x3d, 0x13, 0x55, 0xe1, 0xf7, 0x69,
	0xd0, 0x0a, 0xb3, 0x13, 0xf0, 0xd2, 0x0a, 0x13, 0x8d, 0x63, 0x1b, 0x92, 0x3f, 0x30, 0xb2, 0x37,
	0x0a, 0xa2, 0x4c, 0x88, 0x2c, 0xc7, 0x68, 0x99, 0x4a, 0xf4, 0x75, 0x99, 0x60, 0x0c, 0x4d, 0xbb,
	0x25, 0xac, 0xb9, 0x96, 0xd3, 0x95, 0x19, 0xb6, 0x9b, 0x9b, 0x76, 0x4b, 0x84, 0xcf, 0xc1, 0xb5,
	0xd1, 0x29, 0xf6, 0x14, 0x5c, 0xae, 0xb1, 0x50, 0x26, 0xbe, 0xae, 0xf1, 0xef, 0xb7, 0x46, 0xab,
	0xc7, 0x8d, 0x18, 0x0a, 0x38, 0xb0, 0xf0, 0x3c, 0xc9, 0x30, 0xc6, 0x5f, 0xb5, 0x19, 0xc8, 0x42,
	0x70, 0xec, 0xb7, 0x41, 0xb1, 0xdf, 0xf4, 0x91, 0xc6, 0x5e, 0xc1, 0x9e, 0x34, 0x96, 0x71, 0xd5,
	0x78, 0x68, 0x15, 0xde, 0xe8, 0x5e, 0xdb, 0x7b, 0x65, 0x60, 0xec, 0xc9, 0x16, 0x84, 0x17, 0x70,
	0xa7, 0x3d, 0x50, 0x49, 0x51, 0x2a, 0xda, 0x9b, 0x6d, 0x59, 0x2c, 0x9a, 0x6a, 0xcb, 0x29, 0xfe,
	0xa7, 0x59, 0xb2, 0xe1, 0x6c, 0xcd, 0xee, 0x82, 0x9b, 0x8a, 0xba, 0xd4, 0xb4, 0x60, 0x37, 0x6e,
	0x40, 0xfb, 0x50, 0x67, 0xc3, 0x43, 0x47, 0xff, 0x3a, 0xe0, 0x59, 0xfc, 0x05, 0xab, 0x0b, 0x9e,
	0x22, 0x3b, 0x84, 0xde, 0x19, 0x45, 0xce, 0xd6, 0x0c, 0xc1, 0x1a, 0x66, 0xcf, 0xa0, 0x7b, 0x86,
	0x7a, 0x6b, 0xdb, 0x4b, 0x70, 0xdf, 0xd1, 0x7d, 0xd6, 0x1b, 0x1f, 0xde, 0xd8, 0xdc, 0xc7, 0x52,
	0x1f, 0x8d, 0xbe, 0x27, 0x79, 0x8d, 0xec, 0x18, 0x76, 0x3f, 0x71, 0xa5, 0xdf, 0xe6, 0x39, 0x7b,
	0x70, 0xdd, 0x77, 0x25, 0xc1, 0xe0, 0xe0, 0xba, 0xa4, 0xd8, 0x1b, 0x70, 0xac, 0x6d, 0x93, 0x27,
	0xb8, 0x4d, 0x5a, 0x04, 0x6e, 0x1e, 0xff, 0x8d, 0x3e, 0x99, 0xad, 0xaf, 0x3a, 0x86, 0xde, 0x7b,
	0xcc, 0xf1, 0x96, 0xce, 0x4d, 0xcf, 0x3a, 0x7d, 0x01, 0xa1, 0xf9, 0x47, 0x47, 0x3f, 0xb8, 0x9a,
	0xd7, 0xb3, 0xa4, 0x8c, 0xe6, 0xc8, 0x75, 0x1d, 0xa5, 0x39, 0xc7, 0x52, 0xaf, 0x0c, 0xa7, 0x03,
	0xba, 0x98, 0x45, 0xe7, 0x3b, 0x93, 0x1e, 0xd1, 0x47, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb9,
	0x0d, 0xde, 0xa1, 0x99, 0x04, 0x00, 0x00,
}
