// Code generated by protoc-gen-go.
// source: config.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Config struct {
	Id          int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ProjectId   int32                      `protobuf:"varint,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	ProjectName string                     `protobuf:"bytes,3,opt,name=project_name,json=projectName" json:"project_name,omitempty"`
	Version     string                     `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	Environment string                     `protobuf:"bytes,5,opt,name=environment" json:"environment,omitempty"`
	FileName    string                     `protobuf:"bytes,6,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	Content     string                     `protobuf:"bytes,7,opt,name=content" json:"content,omitempty"`
	CreateTime  *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime  *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Config) GetCreateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Config) GetUpdateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

type Configs struct {
	Items []*Config `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Configs) Reset()                    { *m = Configs{} }
func (m *Configs) String() string            { return proto.CompactTextString(m) }
func (*Configs) ProtoMessage()               {}
func (*Configs) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Configs) GetItems() []*Config {
	if m != nil {
		return m.Items
	}
	return nil
}

type ConfigPageRequest struct {
	Config      *Config      `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	PageRequest *PageRequest `protobuf:"bytes,2,opt,name=page_request,json=pageRequest" json:"page_request,omitempty"`
}

func (m *ConfigPageRequest) Reset()                    { *m = ConfigPageRequest{} }
func (m *ConfigPageRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigPageRequest) ProtoMessage()               {}
func (*ConfigPageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ConfigPageRequest) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ConfigPageRequest) GetPageRequest() *PageRequest {
	if m != nil {
		return m.PageRequest
	}
	return nil
}

type ConfigPageResponse struct {
	Page  int32     `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Size  int32     `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Count int32     `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Items []*Config `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

func (m *ConfigPageResponse) Reset()                    { *m = ConfigPageResponse{} }
func (m *ConfigPageResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigPageResponse) ProtoMessage()               {}
func (*ConfigPageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ConfigPageResponse) GetItems() []*Config {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "protobuf.Config")
	proto.RegisterType((*Configs)(nil), "protobuf.Configs")
	proto.RegisterType((*ConfigPageRequest)(nil), "protobuf.ConfigPageRequest")
	proto.RegisterType((*ConfigPageResponse)(nil), "protobuf.ConfigPageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for ConfigService service

type ConfigServiceClient interface {
	Create(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error)
	Get(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error)
	Count(ctx context.Context, in *Config, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error)
	ListAll(ctx context.Context, in *ConfigPageRequest, opts ...grpc.CallOption) (*Configs, error)
	List(ctx context.Context, in *ConfigPageRequest, opts ...grpc.CallOption) (*ConfigPageResponse, error)
	Update(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error)
	Delete(ctx context.Context, in *Config, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error)
}

type configServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfigServiceClient(cc *grpc.ClientConn) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) Create(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/protobuf.ConfigService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Get(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/protobuf.ConfigService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Count(ctx context.Context, in *Config, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error) {
	out := new(google_protobuf1.Int32Value)
	err := grpc.Invoke(ctx, "/protobuf.ConfigService/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListAll(ctx context.Context, in *ConfigPageRequest, opts ...grpc.CallOption) (*Configs, error) {
	out := new(Configs)
	err := grpc.Invoke(ctx, "/protobuf.ConfigService/ListAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) List(ctx context.Context, in *ConfigPageRequest, opts ...grpc.CallOption) (*ConfigPageResponse, error) {
	out := new(ConfigPageResponse)
	err := grpc.Invoke(ctx, "/protobuf.ConfigService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Update(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/protobuf.ConfigService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Delete(ctx context.Context, in *Config, opts ...grpc.CallOption) (*google_protobuf1.Int32Value, error) {
	out := new(google_protobuf1.Int32Value)
	err := grpc.Invoke(ctx, "/protobuf.ConfigService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigService service

type ConfigServiceServer interface {
	Create(context.Context, *Config) (*Config, error)
	Get(context.Context, *Config) (*Config, error)
	Count(context.Context, *Config) (*google_protobuf1.Int32Value, error)
	ListAll(context.Context, *ConfigPageRequest) (*Configs, error)
	List(context.Context, *ConfigPageRequest) (*ConfigPageResponse, error)
	Update(context.Context, *Config) (*Config, error)
	Delete(context.Context, *Config) (*google_protobuf1.Int32Value, error)
}

func RegisterConfigServiceServer(s *grpc.Server, srv ConfigServiceServer) {
	s.RegisterService(&_ConfigService_serviceDesc, srv)
}

func _ConfigService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ConfigService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Create(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ConfigService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Get(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ConfigService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Count(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ConfigService/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListAll(ctx, req.(*ConfigPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ConfigService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).List(ctx, req.(*ConfigPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ConfigService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Update(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Delete(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ConfigService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ConfigService_Get_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _ConfigService_Count_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _ConfigService_ListAll_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ConfigService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ConfigService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0x4b, 0x6b, 0xdb, 0x40,
	0x10, 0xc6, 0x6f, 0x7b, 0x94, 0x96, 0x66, 0x68, 0x41, 0xd8, 0x2d, 0xa4, 0x3e, 0x94, 0x14, 0x8a,
	0x4c, 0x6d, 0x68, 0x1b, 0x72, 0x4a, 0x52, 0x28, 0x81, 0x52, 0x82, 0xfb, 0xb8, 0x1a, 0x59, 0x1e,
	0xcb, 0x1b, 0xa4, 0x5d, 0x55, 0x5a, 0x39, 0x34, 0xf7, 0xfe, 0xb6, 0xfe, 0xad, 0xee, 0x43, 0x8a,
	0x4c, 0x6c, 0x9c, 0x9c, 0x32, 0xf3, 0x3d, 0x46, 0xbb, 0xdf, 0x6c, 0x0c, 0x07, 0x81, 0xe0, 0x4b,
	0x16, 0x7a, 0x49, 0x2a, 0xa4, 0xc0, 0xae, 0xf9, 0x33, 0xcf, 0x97, 0xfd, 0xd3, 0x90, 0xc9, 0x55,
	0x3e, 0xf7, 0x02, 0x11, 0x8f, 0x42, 0x11, 0xf9, 0x3c, 0x1c, 0x95, 0xdc, 0x28, 0x91, 0x7f, 0x12,
	0xca, 0x46, 0x92, 0xc5, 0x94, 0x49, 0x3f, 0x4e, 0xaa, 0xca, 0x8e, 0xe9, 0x9f, 0x3c, 0x6c, 0xbe,
	0x49, 0xfd, 0x24, 0xa1, 0xb4, 0x2a, 0x0a, 0xab, 0x3a, 0x4f, 0x1c, 0x0b, 0x6e, 0xbb, 0xe1, 0xbf,
	0x3a, 0xb4, 0x2f, 0xcc, 0x01, 0xf1, 0x29, 0xd4, 0xd9, 0xc2, 0xad, 0x1d, 0xd5, 0x8e, 0x5b, 0x53,
	0x55, 0xe1, 0x2b, 0x00, 0xa5, 0xb9, 0xa6, 0x40, 0xce, 0x14, 0x5e, 0x37, 0x78, 0xaf, 0x40, 0x2e,
	0x17, 0xf8, 0x1a, 0x0e, 0x4a, 0x9a, 0xfb, 0x31, 0xb9, 0x0d, 0x25, 0xe8, 0x4d, 0x9d, 0x02, 0xfb,
	0xa6, 0x20, 0x74, 0xa1, 0xb3, 0x56, 0x1f, 0x66, 0x82, 0xbb, 0x4d, 0xc3, 0x96, 0x2d, 0x1e, 0x81,
	0x43, 0x7c, 0xcd, 0x52, 0xc1, 0x63, 0xe2, 0xd2, 0x6d, 0x59, 0xef, 0x06, 0x84, 0x03, 0xe8, 0x2d,
	0x59, 0x44, 0x76, 0x76, 0xdb, 0xf0, 0x5d, 0x0d, 0x94, 0x83, 0x55, 0xaa, 0x52, 0x5b, 0x3b, 0x76,
	0x70, 0xd1, 0xe2, 0x29, 0x38, 0x41, 0x4a, 0xbe, 0xa4, 0x99, 0x8e, 0xcc, 0xed, 0x2a, 0xd6, 0x19,
	0xf7, 0xbd, 0x50, 0x88, 0x30, 0x22, 0xaf, 0xcc, 0xc8, 0xfb, 0x51, 0xe6, 0x39, 0x05, 0x2b, 0xd7,
	0x80, 0x36, 0xe7, 0xc9, 0xe2, 0xce, 0xdc, 0x7b, 0xd8, 0x6c, 0xe5, 0x1a, 0x18, 0xbe, 0x87, 0x8e,
	0x0d, 0x32, 0xc3, 0x37, 0xd0, 0x62, 0x92, 0xe2, 0x4c, 0x85, 0xd9, 0x50, 0x13, 0x9e, 0x55, 0x56,
	0xab, 0x98, 0x5a, 0x7a, 0x78, 0x03, 0x87, 0x16, 0xb8, 0xf2, 0x43, 0x9a, 0xd2, 0xef, 0x5c, 0x8d,
	0xc5, 0x63, 0x68, 0xdb, 0x17, 0x63, 0x56, 0xb1, 0xcb, 0x5d, 0xf0, 0xf8, 0x49, 0x6d, 0x40, 0x19,
	0x67, 0xa9, 0x75, 0x9a, 0x15, 0x39, 0xe3, 0x17, 0x95, 0x7e, 0x63, 0xac, 0x5a, 0x4c, 0xd5, 0x0c,
	0x6f, 0x01, 0x37, 0x3f, 0x9c, 0x25, 0x82, 0x67, 0x84, 0x08, 0x4d, 0x2d, 0x2a, 0x9e, 0x80, 0xa9,
	0x35, 0x96, 0xb1, 0x5b, 0x2a, 0xd6, 0x6f, 0x6a, 0x7c, 0x0e, 0xad, 0x40, 0xe4, 0x2a, 0xfb, 0x86,
	0x01, 0x6d, 0x53, 0x5d, 0xba, 0xb9, 0xf7, 0xd2, 0xe3, 0xbf, 0x0d, 0x78, 0x62, 0x91, 0xef, 0x94,
	0xae, 0x59, 0x40, 0xf8, 0x4e, 0x3d, 0x41, 0xb3, 0x04, 0xdc, 0x32, 0xf5, 0xb7, 0x10, 0x7c, 0x0b,
	0x8d, 0x2f, 0x24, 0x1f, 0x25, 0xfd, 0x00, 0xad, 0x0b, 0x73, 0xb6, 0x6d, 0xf1, 0x60, 0x6b, 0xab,
	0x97, 0x5c, 0x4e, 0xc6, 0xbf, 0xfc, 0x28, 0x27, 0x3c, 0x81, 0xce, 0x57, 0x96, 0xc9, 0xb3, 0x28,
	0xc2, 0xc1, 0x7d, 0xe7, 0x46, 0xa6, 0xfd, 0xc3, 0xfb, 0x64, 0x86, 0x67, 0xd0, 0xd4, 0xd6, 0xfd,
	0xbe, 0x97, 0xbb, 0xc9, 0x62, 0x0d, 0x2a, 0x8e, 0x9f, 0xe6, 0x59, 0x3d, 0xea, 0x8e, 0x1f, 0xa1,
	0xfd, 0x99, 0x22, 0xda, 0xa9, 0xde, 0x77, 0xc9, 0xf3, 0x09, 0x0c, 0xd5, 0x2f, 0x81, 0x77, 0xcd,
	0xb2, 0x55, 0xbe, 0xf4, 0xb9, 0xb7, 0x22, 0x26, 0x73, 0x2f, 0x88, 0x98, 0xfa, 0x37, 0xba, 0x33,
	0x9c, 0x3b, 0xc5, 0x01, 0x75, 0x7f, 0x55, 0x9b, 0xb7, 0x0d, 0x31, 0xf9, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0x02, 0x59, 0x00, 0x2d, 0xd5, 0x04, 0x00, 0x00,
}
